// 1. Importar os 'Hooks' que vamos usar
import { useState, useEffect } from 'react';

// 2. Definir a "Interface" (o "Contrato") da Tarefa
// Note que √© o MESMO formato que definimos no backend
// Isso garante que o frontend e o backend "falam a mesma l√≠ngua"
interface Task {
  id: string;
  title: string;
  content: string;
  status: string;
}

function App() {
  // 3. Criar o nosso "Estado" (a "mem√≥ria")
  // 'tasks' vai ser a lista de tarefas
  // 'setTasks' √© a fun√ß√£o que usamos para ATUALIZAR a lista
  // Come√ßa como um array vazio: []
  const [tasks, setTasks] = useState<Task[]>([]);

  // üëá NOSSOS NOVOS ESTADOS PARA O FORMUL√ÅRIO üëá
  // "Mem√≥ria" para o campo de input do t√≠tulo
  const [newTitle, setNewTitle] = useState('');
  // "Mem√≥ria" para o campo de textarea do conte√∫do
  const [newContent, setNewContent] = useState('');

  // 4. O "Gatilho" para buscar dados
  useEffect(() => {
    // Esta √© a fun√ß√£o que ser√° executada
    // 'fetch' √© a ferramenta do navegador para fazer requisi√ß√µes HTTP
    fetch('http://localhost:3000/api/tasks') // Nosso endpoint GET
      .then(response => response.json()) // Converte a resposta para JSON
      .then(data => {
        // 5. Recebemos os dados! Agora, guardamos no nosso estado
        setTasks(data);
      })
      .catch(error => {
        // Importante: sempre bom tratar erros
        console.error('Erro ao buscar tarefas:', error);
      });

    // O array vazio '[]' no final significa:
    // "Execute esta fun√ß√£o APENAS UMA VEZ, quando o componente carregar"
  }, []);

  // ------------ NOVA FUN√á√ÉO DE SUBMISS√ÉO ------------------- 
  async function handleSubmit(event: React.FormEvent) {
    // 1. Impede o formul√°rio de recarregar a p√°gina (comportamento padr√£o)
    event.preventDefault();

    // 2. Valida√ß√£o simples no frontend (n√£o deixa criar tarefa vazia)
    if (!newTitle || !newContent) {
      alert("Por favor, preencha o t√≠tulo e o conte√∫do.");
      return; // Para a execu√ß√£o da fun√ß√£o
    }

    // 3. O "pacote" de dados que vamos enviar para o backend
    const newTaskPayload = {
      title: newTitle,
      content: newContent,
      // N√£o precisamos enviar 'status', o backend vai usar "A Fazer"
    };

    // 4. A m√°gica do FETCH (POST)!
    try {
      const response = await fetch('http://localhost:3000/api/tasks', {
        method: 'POST', // Definimos o m√©todo como POST
        headers: {
          // Avisamos o backend que estamos enviando JSON
          'Content-Type': 'application/json',
        },
        // Enviamos nosso "pacote" (payload) como JSON
        body: JSON.stringify(newTaskPayload),
      });

      // Se a resposta n√£o for OK (ex: 400 ou 500), damos um erro
      if (!response.ok) {
        throw new Error('Falha ao criar a tarefa');
      }

      // 5. O backend nos devolveu a tarefa criada (com id, status, etc)
      const createdTask: Task = await response.json();

      // 6. O "Pulo do Gato" - Atualiza√ß√£o Imediata!
      // Adicionamos a nova tarefa √† nossa lista 'tasks' local.
      // Isso faz o React redesenhar a tela com a nova tarefa na lista!
      setTasks( (tarefasAnteriores) => [createdTask, ...tarefasAnteriores] );

      // 7. Limpamos os campos do formul√°rio para a pr√≥xima tarefa
      setNewTitle('');
      setNewContent('');

    } catch (error) {
      console.error("Erro no handleSubmit:", error);
      alert("N√£o foi poss√≠vel criar a tarefa.");
    }
  }

  // 6. O que ser√° mostrado na tela (HTML/JSX)
  return (
    // 'p-8' adiciona um "padding" (espa√ßamento interno)
    <div className="min-h-screen bg-zinc-900 text-white p-8">
        <h1 className="text-5xl font-bold text-center mb-8">
        Meu Projeto Trello
      </h1>

      {/* NOSSO NOVO FORMUL√ÅRIO  */}
      <form 
        onSubmit={handleSubmit} // 1. "Ligar" o form √† nossa fun√ß√£o
        className="max-w-xl mx-auto mb-8 flex flex-col gap-4"
      >
        <input
          type="text"
          placeholder="T√≠tulo da tarefa"
          className="bg-zinc-800 p-2 rounded-lg text-white"
          value={newTitle} // 2. "Ligar" o input ao estado 'newTitle'
          onChange={ (e) => setNewTitle(e.target.value) } // 3. Atualizar o estado a cada tecla
        />
        <textarea
          placeholder="Conte√∫do da tarefa"
          className="bg-zinc-800 p-2 rounded-lg text-white h-24"
          value={newContent} // 2. "Ligar" o textarea ao estado 'newContent'
          onChange={ (e) => setNewContent(e.target.value) } // 3. Atualizar o estado
        />
        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 p-2 rounded-lg font-semibold transition-colors"
        >
          Criar Tarefa
        </button>
      </form>
      {/*  FIM DO FORMUL√ÅRIO */}

      {/* 7. Renderizando a nossa lista de tarefas */}
      <div className="flex flex-col gap-4 max-w-xl mx-auto">
        {/* Usamos '.map()' para transformar cada item do array 'tasks' em um card */}
        {tasks.map((task) => (
          // 'key' √© obrigat√≥rio para o React saber identificar cada item
          <div key={task.id} className="bg-zinc-800 p-4 rounded-lg shadow-md">

            {/* Adicionando uma "tag" para o status */}
            <span className="text-xs font-semibold px-2 py-1 bg-blue-500 text-white rounded-full mb-2 inline-block">
              {task.status} 
            </span>

            <h2 className="text-xl font-semibold">{task.title}</h2>
            <p className="text-zinc-400">{task.content}</p>
          </div>
        ))}
      </div>
    </div>
  )
}

export default App